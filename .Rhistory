downtime$outage.start.date<-as.POSIXct(paste(downtime$outage.start.date,downtime$outage.start.time ), format="%Y.%m.%d %H:%M")
downtime$outage.stop.date<-as.POSIXct(paste(downtime$outage.stop.date,downtime$outage.stop.time ), format="%Y.%m.%d %H:%M")
downtime <- downtime[,-c(7,9)]
downtime$description <- as.character(downtime$description) #changes the description variable to the character string class
downtime$job.type <- as.factor(downtime$job.type) #changes job type to the factor class as there should be a limited amount of job type codes
downtime$outage.length <- downtime$outage.stop.date-downtime$outage.start.date #creates column of class "difftime" which is stored in seconds
unlist(sapply(downtime, class))
```
```{r,warnings = FALSE}
#Associates powerplants with SAP functional location using an external file
power.plant.SAP <- read.csv("power-plant-names2.csv")
power.plant.SAP <-power.plant.SAP[,c(2,3,4)] # remove waste columns
colnames(power.plant.SAP) <- tolower(names(power.plant.SAP))
#re-class the columns
for (i in 1:2) {power.plant.SAP[,i]<-as.character(power.plant.SAP[,i])}
power.plant.SAP$sap.code <- as.integer(as.character(power.plant.SAP$sap.code)) #reclasses to prevent errors when adding leading zeroes, creates Na's through coercion this is totally fine
downtime <-merge(power.plant.SAP, downtime,by.x= "plant", by.y="plant")
downtime <- downtime[!downtime$arne.name %in% c("wind","remove"),] #subsets removing wind and non Statkraft operated power plants
downtime <- downtime[,!names(downtime) =="arne.name"]
downtime$sap.code <- as.factor(sprintf("%04d",downtime$sap.code)) #makes sure all the SAP codes are 4 digits long
```
```{r}
#creates a unique list of downtime events for the list of all downtime events, removing accidental duplicate data, a duplicate is when the same power power plant unit has multiple downtime events with the same start time.
downtime <- downtime[i<-order(as.character(downtime$plant), downtime$outage.length),] #creates a data frame ordered alphabetically and then by order of days out
downtime<- downtime[!(duplicated(downtime[,c(1,5,7)],fromLast=TRUE)),] #removes all duplicates keeping the largest
```
This next code chunk imports the  power.plant.data data set extracts the total amount of genereators per power plant and appends it into a data frame listing the names of all the power plants in the downtime data set.
```{r}
power.plant.data <-read.csv("power-plant-data.csv") #import additional information about the powerplants including the total number of units each powerplant has
power.plant.data$SAP <- as.integer(as.character(power.plant.data$SAP)) # reclasses the SAP umber as a factor so it can be converted to a 4 digti string
power.plant.data$SAP <- as.factor(sprintf("%04d",power.plant.data$SAP)) #converts the SAP number back to a factor so it can be manipulated using the "by" function.
names <- as.data.frame(matrix(data=NA, nrow=length(unique(downtime$plant)),ncol=2))
names <- downtime[!duplicated(downtime$plant) & !is.na(downtime$sap.code),c(1,2)]
x<-as.matrix(by(power.plant.data$Aggr.Nr, power.plant.data$SAP, max))
names <- merge(names,x, by.x="sap.code", by.y="row.names", all.x=TRUE)
colnames(names)[3]<-"nr.generators"
rm(x)
```
Attempting to split the Generator plant name from the generator ID and putting back into the dataframe causes and error as some of the generator ID's are missing. this next code chunk looks at how important the missing data are and how easy they are to fix.
```{r}
#Asseses the missing generator  impact and ease of fix
unamed <-(downtime[downtime$generator=="",c(1,2,5,15)]) #finds out how many events do not have generator names
unamed[,4] <-as.numeric(unamed[,4])
nrow(unamed)*100/nrow(downtime) #calculates % unamed relative to the whole data set in absolute numbers, the result is approx .5% of the total number which is very low
sum(unamed[,4])*100/sum(as.numeric(downtime[,15])) # calculates % unamed relative to the whole data set in terms of time, less than .3% there is not much significance in the missing data
#visualising the distribution of the data importance within the missing generator set
test <-as.numeric(unamed[,4]/(3600*24)) #makes a vector of downtime of the the unamed generators to asses how important they are
test <-test[i<-order(-test)] #orders them from largest to smalled
plot(cumsum(test)) #plots each event to see how the outages are distributed
#although the data isn't very important the majority of the missing data interms of time can be fixed with only a few of the power stations
unamed.time<-melt(as.matrix(by(unamed$outage.length, unamed$plant, sum)))[,-2]  #converts the matrix to produced by the "by" function, performing this conversion using "melt" prevents the powerplant name becoming the rownames as happens when using "as.data.frame"
colnames(unamed.time) <- c("plant","no.gen.time")
unamed.time <-unamed.time[i<-order(-unamed.time[,2]),]
plot(cumsum(unamed.time[,2]/sum(unamed.time[,2])), xaxt="n", ann=FALSE, ylim=c(0,1) )
axis(1, las=2, at=1:length(unique(unamed.time[,1])), lab=unamed.time[,1],cex.axis=0.7 )
title(main="Percent each powerstation makes up of the \"missing generator\"\n subset in terms of total lost downtime")
#appromximately 16% of the power stations with missing generator info are responsible for 80% og the downtime associated with the subset
unamed.time <-merge(unamed.time, names,by.x="plant", by.y="plant")
sum(unamed.time[unamed.time$nr.generators==1,"no.gen.time"])/sum(unamed.time[,"no.gen.time"]) # as can be seen 43% of the missing generator time is accounted for by powerplants with only 1 generator, so a "G1" or "1" can be subbed in for all of those entries
unamed.high.gen <-(unamed.time[unamed.time$nr.generators!=1,])
unamed.high.gen <- unamed.high.gen[i<-order(- unamed.high.gen[,2]),]
plot(cumsum(unamed.high.gen[,2]/sum(unamed.high.gen[,2])), xaxt="n", ann=FALSE, ylim=c(0,1) )
axis(1, las=2, at=1:length(unique(unamed.high.gen[,1])), lab=unamed.high.gen[,1],cex.axis=0.7 )
```
This code chunk fills in the missing generator codes with NA's then removes the name of the power plant from the the generator name.
```{r}
# fix missing generator info
downtime$generator <- as.character(downtime$generator)
downtime$generator<-substr(downtime$generator, nchar(downtime$generator), nchar(downtime$generator))
downtime$generator[downtime$generator==""] <-NA
downtime$generator<-as.factor(downtime$generator) #converts back to factor
plot(table(downtime$generator, exclude=NULL)/table(as.factor(names$nr.generators),exclude=NULL),ylab="Number of failures per generator",sub="The ratio of generators to generator failures, doesn't take account of amount of generator years.\n NA events are the last column and clearly do not have much importance")
```
Assumption production starts at the beginning of first service year
the power plants should be classified into region.
```{r}
table(downtime$plant, format(downtime$outage.start.date, "%Y")) #table showing number of outage starts per year. it seems reasonable to assume that powerplants come into operation for statkraft the year that they have there first downtime event.
```
Calculates amount of generator years of production per year although it assumes that all generators came online when the power station was included in SMG, this isn't necessarily the case however e.g Svartisen
```{r}
#calculate the amount of generator years measured in the system
x <- as.matrix(by(downtime$outage.start.date, downtime$sap.code, min))
names <- merge(names,x, by.x="sap.code", by.y="row.names", all.x=TRUE);rm(x)
class(names[,4]) = c('POSIXt','POSIXct') #reclasses twice in a row to reset the second values into POSIXct dates
colnames(names)[4]<-"start.year"
min.year <-as.numeric(format(min(downtime$outage.start.date), "%Y"))
max.year <-as.numeric(format(max(downtime$outage.start.date), "%Y"))
#Calculates the amount of generator years per generator number
most.gen <- max(as.numeric(names$nr.generators), na.rm=TRUE)
gen.years <- data.frame(cbind(seq(from=1, to=most.gen),rep(NA, most.gen)))
for (i in 1:most.gen) {
p<-1
for (x in min.year:max.year) {years.prod[p,1+i] <- nrow(names[as.numeric(names$nr.generators) >=i & strftime(names$start.year, format ="%Y")<=x,]) #strftime() is used to convert the POsixct date to year format so that it can be combined with the minimum and maximum year values
p<-p+1}
gen.years[i,2] <-sum(years.prod[,1+i])
}
colnames(years.prod) <- c("year", seq(1,8))
for (i in 1:most.gen) {
gen.years[i,3] <- as.numeric(sum(downtime$outage.length[downtime$generator==i], na.rm=TRUE))/(3600*24*365)}
#it might be a good idea to calculate another matrix which shows amount of downtime per year per generator number as this could be combined to make both generator year info and also total production and downtime info.
```
```{r}
#Plots from the previous section's calculations
plot(rowSums(years.prod[,-1]))
#Calculates lost generator years due to downtime.
plot(gen.years[,2])
par(mfrow=c(1,2))
plot((table(downtime$generator)/gen.years[,2]), main="Number of downtime events\n per generator year for each generator number", xlab="Generator number", ylab="events per generator year")
plot(gen.years[,2]/gen.years[,3], main="Outage years per generator year\n by generator number", xlab=" Generator number", ylab="outage years per generator year",  ylim=c(0,max(gen.years[,2]/gen.years[,3])) )
```
The data obtained by having historic generator years can be used in both calculating failure rates of different things more accurately (e.g 10 week or longer failure) as well as helping understand and work with availability and it's derivatives
We should have "in" and "out"" dates for power stations, this will allow us to remove the contribution of generating years of a power station when it is no longer appropriate e.g Gamle Haukeli. In addition having month in and out of commission would help with calculating generator years as well as availability. Although having this information on unit/generator level is ideal it is not a priority as it would only affect Svartisen. if M can supply more detailed information on when the various power plants began to be monitored by the SMG system this would help with the accuracy of the historic data.
```{r}
#Lost time calc
time <- downtime[as.numeric(format(downtime$outage.start.date, "%Y"))>=2006 & as.numeric(format(downtime$outage.stop.date, "%Y"))<=2012,]
outage.days <-as.numeric(sum(time$outage.length))/(3600*24) #number of days outage between 2006 and the end of 2012
generation.days <- sum(years.prod[years.prod$year>=2006 & years.prod$year>=2006,-1 ])*365 #number of days generation between 2006 and the end of 2012
time.long <- time[time$outage.length>(70*24*3600) & !is.na(time$job.type),] #down time events over 10 weeks
```
#Code that has been replaced by a more efficient version
```{r, eval=FALSE}
#this entire section was replaced by a duplicate function using Duplicate and the c() function
names <-unique(downtime$plant)
downtime.unique <- downtime[!duplicated(downtime$outage.start.date, fromLast=TRUE),] #makes data frame of max poss length
downtime.unique <- downtime[NA,] #fills data frame with NAs
p<-1 #the p varaible is only to ensure that the non duplicated maximised downtime events do not overwrite eachother in the data frame.
for (i in 1:length(names)) {single.plant <- downtime[downtime$plant==as.character(names[i]),] #creates a list of all events for each plant
L<-single.plant[!duplicated(single.plant$outage.start.date, fromLast=TRUE),] #creates a dataframe of the unique plant events
downtime.unique[p:(p+nrow(L)-1),]<-L #inserts the dataframe into the main dataframe
p<-p+nrow(L)} #prevents overwriting the previously inserted data
#downtime.unique<-downtime.unique[rowSums(is.na(downtime.unique))!=ncol(downtime.unique),] #truncates the data frame to be only useful data
downtime<-downtime.unique[rowSums(is.na(downtime.unique))!=ncol(downtime.unique),] #truncates the data frame to be only useful data
rm(single.plant);rm(i);rm(p);rm(L);rm(names); rm(downtime.unique)
```
```{r, eval=FALSE}
#this code was replaced by sbstrstring function as I realised I needed to remove everything except the last number
split generator column so that only the last word is left
downtime$generator<- do.call(rbind, strsplit(downtime$generator, " (?=[^ ]+$)", perl=TRUE))[,2] split the generator column  to remove the power plant names
downtime$generator <-as.factor(downtime$generator)
plot(table(do.call(rbind, strsplit(downtime$generator, " (?=[^ ]+$)", perl=TRUE))[,2])) #plot the unique generator types
```
Down time 1998-2013
========================================================
This markdown file is to explore, quality check, clean and Analyse the SMG downtime event register for all available history which is 1998 to the end of 2013, addition years can be added as time goes on.
```{r}
#required packages
install.packages("reshape2")
library("reshape2")
```
```{r}
setwd("\\\\hk-fil-05/users14$/u35465/Downtime")
#setwd("C:/Users/Jonno/Dropbox/R-code/downtime")
downtime.import <- read.csv("Downtime-1996-2013.csv")
downtime <-downtime.import
summary(downtime)
head(downtime)
```
The following colomns will be deleted
Beskrivelse.fleks this has a low use rate and seems a bit ad hoc how it is filled out
Frist.godkjenning doesn't seem to be of much use
Godkjent.av       doesn't seem to be of much use
X:X.2             data doesn't seem very interesting or of good quality
X.4               name of person who edited it is not important if we have thier U number in X.3
X.5:x.13          No use for information
```{r }
#remove unwanted columns and rename the remainder
downtime <-downtime[,c(1:11,15:16,20,31)]
colnames(downtime)[c(2,3,5,6,7,8,9,11,12,13,14,15)]<- c("data.set","plant","frequency","outage.start.date","outage.start.time","outage.stop.date","outage.stop.time","description","job.type", "job.id", "u.number", "active")
colnames(downtime) <- tolower(names(downtime))
colnames(downtime)
downtime <-downtime[!downtime$plant=="",] # remove all rows where there is no power station name
head(downtime)
```
```{r }
#we need to check the class of each variable to make sure that everything is being registered correctly
sapply(downtime, function(x) {class(x)})
```
```{r }
downtime$generator <-as.character(downtime$generator)
#Pastes time and date cells together then converts to Class POSIX, removes the time columns and inserts a time difference column
downtime$outage.start.date<-as.POSIXct(paste(downtime$outage.start.date,downtime$outage.start.time ), format="%Y.%m.%d %H:%M")
downtime$outage.stop.date<-as.POSIXct(paste(downtime$outage.stop.date,downtime$outage.stop.time ), format="%Y.%m.%d %H:%M")
downtime <- downtime[,-c(7,9)]
downtime$description <- as.character(downtime$description) #changes the description variable to the character string class
downtime$job.type <- as.factor(downtime$job.type) #changes job type to the factor class as there should be a limited amount of job type codes
downtime$outage.length <- downtime$outage.stop.date-downtime$outage.start.date #creates column of class "difftime" which is stored in seconds
unlist(sapply(downtime, class))
```
```{r,warnings = FALSE}
#Associates powerplants with SAP functional location using an external file
power.plant.SAP <- read.csv("power-plant-names2.csv")
power.plant.SAP <-power.plant.SAP[,c(2,3,4)] # remove waste columns
colnames(power.plant.SAP) <- tolower(names(power.plant.SAP))
#re-class the columns
for (i in 1:2) {power.plant.SAP[,i]<-as.character(power.plant.SAP[,i])}
power.plant.SAP$sap.code <- as.integer(as.character(power.plant.SAP$sap.code)) #reclasses to prevent errors when adding leading zeroes, creates Na's through coercion this is totally fine
downtime <-merge(power.plant.SAP, downtime,by.x= "plant", by.y="plant")
downtime <- downtime[!downtime$arne.name %in% c("wind","remove"),] #subsets removing wind and non Statkraft operated power plants
downtime <- downtime[,!names(downtime) =="arne.name"]
downtime$sap.code <- as.factor(sprintf("%04d",downtime$sap.code)) #makes sure all the SAP codes are 4 digits long
```
```{r}
#creates a unique list of downtime events for the list of all downtime events, removing accidental duplicate data, a duplicate is when the same power power plant unit has multiple downtime events with the same start time.
downtime <- downtime[i<-order(as.character(downtime$plant), downtime$outage.length),] #creates a data frame ordered alphabetically and then by order of days out
downtime<- downtime[!(duplicated(downtime[,c(1,5,7)],fromLast=TRUE)),] #removes all duplicates keeping the largest
```
This next code chunk imports the  power.plant.data data set extracts the total amount of genereators per power plant and appends it into a data frame listing the names of all the power plants in the downtime data set.
```{r}
power.plant.data <-read.csv("power-plant-data.csv") #import additional information about the powerplants including the total number of units each powerplant has
power.plant.data$SAP <- as.integer(as.character(power.plant.data$SAP)) # reclasses the SAP umber as a factor so it can be converted to a 4 digti string
power.plant.data$SAP <- as.factor(sprintf("%04d",power.plant.data$SAP)) #converts the SAP number back to a factor so it can be manipulated using the "by" function.
names <- as.data.frame(matrix(data=NA, nrow=length(unique(downtime$plant)),ncol=2))
names <- downtime[!duplicated(downtime$plant) & !is.na(downtime$sap.code),c(1,2)]
x<-as.matrix(by(power.plant.data$Aggr.Nr, power.plant.data$SAP, max))
names <- merge(names,x, by.x="sap.code", by.y="row.names", all.x=TRUE)
colnames(names)[3]<-"nr.generators"
rm(x)
```
Attempting to split the Generator plant name from the generator ID and putting back into the dataframe causes and error as some of the generator ID's are missing. this next code chunk looks at how important the missing data are and how easy they are to fix.
```{r}
#Asseses the missing generator  impact and ease of fix
unamed <-(downtime[downtime$generator=="",c(1,2,5,15)]) #finds out how many events do not have generator names
unamed[,4] <-as.numeric(unamed[,4])
nrow(unamed)*100/nrow(downtime) #calculates % unamed relative to the whole data set in absolute numbers, the result is approx .5% of the total number which is very low
sum(unamed[,4])*100/sum(as.numeric(downtime[,15])) # calculates % unamed relative to the whole data set in terms of time, less than .3% there is not much significance in the missing data
#visualising the distribution of the data importance within the missing generator set
test <-as.numeric(unamed[,4]/(3600*24)) #makes a vector of downtime of the the unamed generators to asses how important they are
test <-test[i<-order(-test)] #orders them from largest to smalled
plot(cumsum(test)) #plots each event to see how the outages are distributed
#although the data isn't very important the majority of the missing data interms of time can be fixed with only a few of the power stations
unamed.time<-melt(as.matrix(by(unamed$outage.length, unamed$plant, sum)))[,-2]  #converts the matrix to produced by the "by" function, performing this conversion using "melt" prevents the powerplant name becoming the rownames as happens when using "as.data.frame"
colnames(unamed.time) <- c("plant","no.gen.time")
unamed.time <-unamed.time[i<-order(-unamed.time[,2]),]
plot(cumsum(unamed.time[,2]/sum(unamed.time[,2])), xaxt="n", ann=FALSE, ylim=c(0,1) )
axis(1, las=2, at=1:length(unique(unamed.time[,1])), lab=unamed.time[,1],cex.axis=0.7 )
title(main="Percent each powerstation makes up of the \"missing generator\"\n subset in terms of total lost downtime")
#appromximately 16% of the power stations with missing generator info are responsible for 80% og the downtime associated with the subset
unamed.time <-merge(unamed.time, names,by.x="plant", by.y="plant")
sum(unamed.time[unamed.time$nr.generators==1,"no.gen.time"])/sum(unamed.time[,"no.gen.time"]) # as can be seen 43% of the missing generator time is accounted for by powerplants with only 1 generator, so a "G1" or "1" can be subbed in for all of those entries
unamed.high.gen <-(unamed.time[unamed.time$nr.generators!=1,])
unamed.high.gen <- unamed.high.gen[i<-order(- unamed.high.gen[,2]),]
plot(cumsum(unamed.high.gen[,2]/sum(unamed.high.gen[,2])), xaxt="n", ann=FALSE, ylim=c(0,1) )
axis(1, las=2, at=1:length(unique(unamed.high.gen[,1])), lab=unamed.high.gen[,1],cex.axis=0.7 )
```
This code chunk fills in the missing generator codes with NA's then removes the name of the power plant from the the generator name.
```{r}
# fix missing generator info
downtime$generator <- as.character(downtime$generator)
downtime$generator<-substr(downtime$generator, nchar(downtime$generator), nchar(downtime$generator))
downtime$generator[downtime$generator==""] <-NA
downtime$generator<-as.factor(downtime$generator) #converts back to factor
plot(table(downtime$generator, exclude=NULL)/table(as.factor(names$nr.generators),exclude=NULL),ylab="Number of failures per generator",sub="The ratio of generators to generator failures, doesn't take account of amount of generator years.\n NA events are the last column and clearly do not have much importance")
```
Assumption production starts at the beginning of first service year
the power plants should be classified into region.
```{r}
table(downtime$plant, format(downtime$outage.start.date, "%Y")) #table showing number of outage starts per year. it seems reasonable to assume that powerplants come into operation for statkraft the year that they have there first downtime event.
```
Calculates amount of generator years of production per year although it assumes that all generators came online when the power station was included in SMG, this isn't necessarily the case however e.g Svartisen
```{r}
#calculate the amount of generator years measured in the system
x <- as.matrix(by(downtime$outage.start.date, downtime$sap.code, min))
names <- merge(names,x, by.x="sap.code", by.y="row.names", all.x=TRUE);rm(x)
class(names[,4]) = c('POSIXt','POSIXct') #reclasses twice in a row to reset the second values into POSIXct dates
colnames(names)[4]<-"start.year"
min.year <-as.numeric(format(min(downtime$outage.start.date), "%Y"))
max.year <-as.numeric(format(max(downtime$outage.start.date), "%Y"))
#Calculates the amount of generator years per generator number
most.gen <- max(as.numeric(names$nr.generators), na.rm=TRUE)
gen.years <- data.frame(cbind(seq(from=1, to=most.gen),rep(NA, most.gen)))
for (i in 1:most.gen) {
p<-1
for (x in min.year:max.year) {years.prod[p,1+i] <- nrow(names[as.numeric(names$nr.generators) >=i & strftime(names$start.year, format ="%Y")<=x,]) #strftime() is used to convert the POsixct date to year format so that it can be combined with the minimum and maximum year values
p<-p+1}
gen.years[i,2] <-sum(years.prod[,1+i])
}
colnames(years.prod) <- c("year", seq(1,8))
for (i in 1:most.gen) {
gen.years[i,3] <- as.numeric(sum(downtime$outage.length[downtime$generator==i], na.rm=TRUE))/(3600*24*365)}
#it might be a good idea to calculate another matrix which shows amount of downtime per year per generator number as this could be combined to make both generator year info and also total production and downtime info.
```
```{r}
#Plots from the previous section's calculations
plot(rowSums(years.prod[,-1]))
#Calculates lost generator years due to downtime.
plot(gen.years[,2])
par(mfrow=c(1,2))
plot((table(downtime$generator)/gen.years[,2]), main="Number of downtime events\n per generator year for each generator number", xlab="Generator number", ylab="events per generator year")
plot(gen.years[,2]/gen.years[,3], main="Outage years per generator year\n by generator number", xlab=" Generator number", ylab="outage years per generator year",  ylim=c(0,max(gen.years[,2]/gen.years[,3])) )
```
The data obtained by having historic generator years can be used in both calculating failure rates of different things more accurately (e.g 10 week or longer failure) as well as helping understand and work with availability and it's derivatives
We should have "in" and "out"" dates for power stations, this will allow us to remove the contribution of generating years of a power station when it is no longer appropriate e.g Gamle Haukeli. In addition having month in and out of commission would help with calculating generator years as well as availability. Although having this information on unit/generator level is ideal it is not a priority as it would only affect Svartisen. if M can supply more detailed information on when the various power plants began to be monitored by the SMG system this would help with the accuracy of the historic data.
```{r}
#Lost time calc
time <- downtime[as.numeric(format(downtime$outage.start.date, "%Y"))>=2006 & as.numeric(format(downtime$outage.stop.date, "%Y"))<=2012,]
outage.days <-as.numeric(sum(time$outage.length))/(3600*24) #number of days outage between 2006 and the end of 2012
generation.days <- sum(years.prod[years.prod$year>=2006 & years.prod$year>=2006,-1 ])*365 #number of days generation between 2006 and the end of 2012
time.long <- time[time$outage.length>(70*24*3600) & !is.na(time$job.type),] #down time events over 10 weeks
```
#Code that has been replaced by a more efficient version
```{r, eval=FALSE}
#this entire section was replaced by a duplicate function using Duplicate and the c() function
names <-unique(downtime$plant)
downtime.unique <- downtime[!duplicated(downtime$outage.start.date, fromLast=TRUE),] #makes data frame of max poss length
downtime.unique <- downtime[NA,] #fills data frame with NAs
p<-1 #the p varaible is only to ensure that the non duplicated maximised downtime events do not overwrite eachother in the data frame.
for (i in 1:length(names)) {single.plant <- downtime[downtime$plant==as.character(names[i]),] #creates a list of all events for each plant
L<-single.plant[!duplicated(single.plant$outage.start.date, fromLast=TRUE),] #creates a dataframe of the unique plant events
downtime.unique[p:(p+nrow(L)-1),]<-L #inserts the dataframe into the main dataframe
p<-p+nrow(L)} #prevents overwriting the previously inserted data
install.packages("reshape2")
EUCG downtime 2014
========================================================
This markdown file is to extract the amount of downtime in hours per power plant per downtime type 110 or 113 for 2013  region west and north so that the data can be used for EUCG benchmarking purposes
```{r}
setwd("\\\\hk-fil-05/users14$/u35465/Downtime")
#downtime <- read.csv2("downtime98_13")
setwd("\\\\hk-fil-05/users14$/u35465/R/Functions")
source("xlsxToR.R")
x <- downtime[format(downtime$outage.start.date, "%Y")== 2013 | format(downtime$outage.stop.date, "%Y")== 2013,]
setwd("\\\\hk-fil-05/users14$/u35465/Benchmarking/EUCG")
SAPEUCG <- xlsxToR("SAP to EUCG ID mapping.xlsx", header = TRUE)
nrow(x[format(x$outage.start.date, "%Y")< 2013,]) #number of events that start before 2013
nrow(x[format(x$outage.stop.date, "%Y") > 2013,]) #number of events that stop after 2013
#restrict time to 2013
x$outage.start.date[format(x$outage.start.date, "%Y")< 2013] <- as.Date("2013-01-01")
x$outage.stop.date[format(x$outage.stop.date, "%Y")> 2013] <- as.Date("2013-12-31")
#get total Outage time
x$outage.length <- difftime(x$outage.stop.date, x$outage.start.date, units = "hours")
#limit to region North and West
x <- x[as.integer(as.character(x$sap.code)) %in% SAPEUCG[,1],]
x$sap.code <- droplevels(x$sap.code)
x$job.type <- droplevels(x$job.type)
y <-as.data.frame.matrix(xtabs( outage.length ~., x[,c(2,11,15)]))
y <-as.data.frame.matrix(xtabs(weight ~., data))
data.frame(xtab.2)
sapply(x, class)
sapply(SAPEUCG, class)
```
View(x)
View(y)
View(x)
View(y)
View(x)
x[x$job.id == 61311,]
x[x$active == "Nei",]
EUCG downtime 2014
========================================================
This markdown file is to extract the amount of downtime in hours per power plant per downtime type 110 or 113 for 2013  region west and north so that the data can be used for EUCG benchmarking purposes
```{r}
setwd("\\\\hk-fil-05/users14$/u35465/Downtime")
#downtime <- read.csv2("downtime98_13")
setwd("\\\\hk-fil-05/users14$/u35465/R/Functions")
source("xlsxToR.R")
x <- downtime[format(downtime$outage.start.date, "%Y")== 2013 | format(downtime$outage.stop.date, "%Y")== 2013,]
setwd("\\\\hk-fil-05/users14$/u35465/Benchmarking/EUCG")
SAPEUCG <- xlsxToR("SAP to EUCG ID mapping.xlsx", header = TRUE)
nrow(x[format(x$outage.start.date, "%Y")< 2013,]) #number of events that start before 2013
nrow(x[format(x$outage.stop.date, "%Y") > 2013,]) #number of events that stop after 2013
#restrict time to 2013
x$outage.start.date[format(x$outage.start.date, "%Y")< 2013] <- as.Date("2013-01-01")
x$outage.stop.date[format(x$outage.stop.date, "%Y")> 2013] <- as.Date("2013-12-31")
#get total Outage time
x$outage.length <- difftime(x$outage.stop.date, x$outage.start.date, units = "hours")
#limit to region North and West
x <- x[as.integer(as.character(x$sap.code)) %in% SAPEUCG[,1],]
#limits data to "active" powerplants
x <-x[x$active == "Ja",]
x$sap.code <- droplevels(x$sap.code)
x$job.type <- droplevels(x$job.type)
y <-as.data.frame.matrix(xtabs( outage.length ~., x[,c(2,11,15)]))
y <-as.data.frame.matrix(xtabs(weight ~., data))
data.frame(xtab.2)
sapply(x, class)
sapply(SAPEUCG, class)
```
View(y)
View(x)
View(y)
EUCG downtime 2014
========================================================
This markdown file is to extract the amount of downtime in hours per power plant per downtime type 110 or 113 for 2013  region west and north so that the data can be used for EUCG benchmarking purposes
```{r}
setwd("\\\\hk-fil-05/users14$/u35465/Downtime")
#downtime <- read.csv2("downtime98_13")
setwd("\\\\hk-fil-05/users14$/u35465/R/Functions")
source("xlsxToR.R")
x <- downtime[format(downtime$outage.start.date, "%Y")== 2013 | format(downtime$outage.stop.date, "%Y")== 2013,]
setwd("\\\\hk-fil-05/users14$/u35465/Benchmarking/EUCG")
SAPEUCG <- xlsxToR("SAP to EUCG ID mapping.xlsx", header = TRUE)
nrow(x[format(x$outage.start.date, "%Y")< 2013,]) #number of events that start before 2013
nrow(x[format(x$outage.stop.date, "%Y") > 2013,]) #number of events that stop after 2013
#restrict time to 2013
x$outage.start.date[format(x$outage.start.date, "%Y")< 2013] <- as.Date("2013-01-01")
x$outage.stop.date[format(x$outage.stop.date, "%Y")> 2013] <- as.Date("2013-12-31")
#get total Outage time
x$outage.length <- difftime(x$outage.stop.date, x$outage.start.date, units = "hours")
#convert all 111 to 110
x$job.type[x$job.type==111] <-110
#limit to region North and West
x <- x[as.integer(as.character(x$sap.code)) %in% SAPEUCG[,1],]
#limits data to "active" powerplants
x <-x[x$active == "Ja",]
x$sap.code <- droplevels(x$sap.code)
x$job.type <- droplevels(x$job.type)
y <-as.data.frame.matrix(xtabs( outage.length ~., x[,c(2,11,15)]))
y <-as.data.frame.matrix(xtabs(weight ~., data))
data.frame(xtab.2)
sapply(x, class)
sapply(SAPEUCG, class)
```
View(y)
setwd("\\\\hk-fil-05/users14$/u35465/R/Exploratory Data Analysis")
EPC <- read.table("household_power_consumption.txt", sep = ";",na.strings = "NA", header = TRUE)
setwd("\\\\hk-fil-05/users14$/u35465/Repos/ExData_Plotting")
EPC[,1] <-as.character(EPC[,1])
EPC[,1] <- as.Date(as.character(EPC[,1]), "%d/%m/%Y")
EPC <- EPC[EPC$Date >= as.Date(" 2007-02-01") & EPC$Date <= as.Date(" 2007-02-02"), ]
for (i in 3:8) {
EPC[,i] <-as.numeric(as.character(EPC[,i]))
}
EPC$DateTime <- as.POSIXct(paste(EPC$Date, EPC$Time), format="%Y-%m-%d %H:%M:%S")
hist(EPC$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (Kilowatts)")
with(EPC, plot(DateTime,Global_active_power, type = "l",  ylab = "Global Active Power (Kilowatts)") )
with(EPC, plot(DateTime,Sub_metering_1, type = "l",  ylab = "Energy Sub Metering") )
with(EPC,lines(DateTime, Sub_metering_2, col = "red"))
with(EPC,lines(DateTime, Sub_metering_3, col = "blue"))
with(EPC, plot(DateTime,Global_reactive_power, type = "l"))
par(mfrow = (c(2,2)))
hist(EPC$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (Kilowatts)")
with(EPC, plot(DateTime,Global_active_power, type = "l",  ylab = "Global Active Power (Kilowatts)") )
with(EPC, plot(DateTime,Sub_metering_1, type = "l",  ylab = "Energy Sub Metering") )
with(EPC,lines(DateTime, Sub_metering_2, col = "red"))
with(EPC,lines(DateTime, Sub_metering_3, col = "blue"))
with(EPC, plot(DateTime,Global_reactive_power, type = "l"))
View(EPC)
View(EPC)
legend("topright", colnames(EPC[,c(7:9)]))
with(EPC, plot(DateTime,Global_active_power, type = "l",  ylab = "Global Active Power (Kilowatts)") )
with(EPC, plot(DateTime,Sub_metering_1, type = "l",  ylab = "Energy Sub Metering") )
with(EPC,lines(DateTime, Sub_metering_2, col = "red"))
with(EPC,lines(DateTime, Sub_metering_3, col = "blue"))
legend("topright", colnames(EPC[,c(7:9)], col = c("Black", "Red", "Blue")))
par(mfrow = (c(1,1)))
hist(EPC$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (Kilowatts)")
with(EPC, plot(DateTime,Global_active_power, type = "l",  ylab = "Global Active Power (Kilowatts)") )
with(EPC, plot(DateTime,Sub_metering_1, type = "l",  ylab = "Energy Sub Metering") )
with(EPC,lines(DateTime, Sub_metering_2, col = "red"))
with(EPC,lines(DateTime, Sub_metering_3, col = "blue"))
legend("topright", colnames(EPC[,c(7:9)], col = c("Black", "Red", "Blue")))
legend("topright", colnames(EPC[,c(7:9)], col = c("black", "red", "blue")))
legend("topright", colnames(EPC[,c(7:9)], col = c("red", "blue")))
legend("topright", colnames(EPC[,c(7:9)]), col = c("black", "red", "blue"))
?legend
legend("topright", colnames(EPC[,c(7:9)]), col = c("black", "red", "blue"), cex= .8)
legend("topright", colnames(EPC[,c(7:9)]), col = c("black", "red", "blue"), cex= .5)
legend("topright", colnames(EPC[,c(7:9)]), col = c("black", "red", "blue"),)
legend("topright", colnames(EPC[,c(7:9)]), col = c("black", "red", "blue"), lty = 1)
par(mfrow = (c(2,2)))
hist(EPC$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (Kilowatts)")
with(EPC, plot(DateTime,Global_active_power, type = "l",  ylab = "Global Active Power (Kilowatts)") )
with(EPC, plot(DateTime,Sub_metering_1, type = "l",  ylab = "Energy Sub Metering") )
with(EPC,lines(DateTime, Sub_metering_2, col = "red"))
with(EPC,lines(DateTime, Sub_metering_3, col = "blue"))
legend("topright", colnames(EPC[,c(7:9)]), col = c("black", "red", "blue"), lty = 1)
with(EPC, plot(DateTime,Global_reactive_power, type = "l"))
Exploratory Data analysis Project 1
========================================================
```{r}
setwd("\\\\hk-fil-05/users14$/u35465/R/Exploratory Data Analysis")
EPC <- read.table("household_power_consumption.txt", sep = ";",na.strings = "NA", header = TRUE)
setwd("\\\\hk-fil-05/users14$/u35465/Repos/ExData_Plotting")
EPC[,1] <-as.character(EPC[,1])
EPC[,1] <- as.Date(as.character(EPC[,1]), "%d/%m/%Y")
EPC <- EPC[EPC$Date >= as.Date(" 2007-02-01") & EPC$Date <= as.Date(" 2007-02-02"), ]
for (i in 3:8) {
EPC[,i] <-as.numeric(as.character(EPC[,i]))
}
EPC$DateTime <- as.POSIXct(paste(EPC$Date, EPC$Time), format="%Y-%m-%d %H:%M:%S")
par(mfrow = (c(1,1)))
hist(EPC$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (Kilowatts)")
with(EPC, plot(DateTime,Global_active_power, type = "l",  ylab = "Global Active Power (Kilowatts)") )
with(EPC, plot(DateTime,Sub_metering_1, type = "l",  ylab = "Energy Sub Metering") )
with(EPC,lines(DateTime, Sub_metering_2, col = "red"))
with(EPC,lines(DateTime, Sub_metering_3, col = "blue"))
legend("topright", colnames(EPC[,c(7:9)]), col = c("black", "red", "blue"), lty = 1)
with(EPC, plot(DateTime,Global_reactive_power, type = "l"))
par(mfrow = (c(2,2)))
hist(EPC$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (Kilowatts)")
with(EPC, plot(DateTime,Global_active_power, type = "l",  ylab = "Global Active Power (Kilowatts)") )
with(EPC, plot(DateTime,Sub_metering_1, type = "l",  ylab = "Energy Sub Metering") )
with(EPC,lines(DateTime, Sub_metering_2, col = "red"))
with(EPC,lines(DateTime, Sub_metering_3, col = "blue"))
legend("topright", colnames(EPC[,c(7:9)]), col = c("black", "red", "blue"), lty = 1)
with(EPC, plot(DateTime,Global_reactive_power, type = "l"))
####Need to add in Legned and then print in the correct dimensions
sapply(EPC,class)
```
?pmg
?png
y <- c(with(EPC, plot(DateTime,Sub_metering_1, type = "l",  ylab = "Energy Sub Metering") ),
with(EPC,lines(DateTime, Sub_metering_2, col = "red")),
with(EPC,lines(DateTime, Sub_metering_3, col = "blue")),
legend("topright", colnames(EPC[,c(7:9)]), col = c("black", "red", "blue"), lty = 1)
)
par(mfrow = (c(1,1)))
y
plot(y)
y <- with(EPC, plot(DateTime,Global_active_power, type = "l",  ylab = "Global Active Power (Kilowatts)") )
hist(EPC$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (Kilowatts)")
y
y <- with(EPC, plot(DateTime,Global_active_power, type = "l",  ylab = "Global Active Power (Kilowatts)") )
